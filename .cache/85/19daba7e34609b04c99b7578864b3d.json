{"id":"../../node_modules/@babel/types/lib/validators/isType.js","dependencies":[{"name":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\node_modules\\@babel\\types\\lib\\validators\\isType.js.map","includedInParent":true,"mtime":1695821070758},{"name":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\package.json","includedInParent":true,"mtime":1699342775613},{"name":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\node_modules\\@babel\\types\\package.json","includedInParent":true,"mtime":1695821070792},{"name":"../definitions/index.js","loc":{"line":7,"column":21,"index":127},"parent":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\node_modules\\@babel\\types\\lib\\validators\\isType.js","resolved":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\node_modules\\@babel\\types\\lib\\definitions\\index.js"}],"generated":{"js":"\"use strict\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isType;\nvar _index = require(\"../definitions/index.js\");\nfunction isType(nodeType, targetType) {\n  if (nodeType === targetType) return true;\n  if (nodeType == null) return false;\n  if (_index.ALIAS_KEYS[targetType]) return false;\n  var aliases = _index.FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n    var _iterator = _createForOfIteratorHelper(aliases),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var alias = _step.value;\n        if (nodeType === alias) return true;\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  return false;\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/validators/isType.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":0}},{"source":"../../src/validators/isType.ts","name":"_index","original":{"line":1,"column":0},"generated":{"line":10,"column":4}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":10}},{"source":"../../src/validators/isType.ts","name":"require","original":{"line":1,"column":0},"generated":{"line":10,"column":13}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":20}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":21}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":46}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":10,"column":47}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":17,"column":15},"generated":{"line":11,"column":0}},{"source":"../../src/validators/isType.ts","name":"isType","original":{"line":17,"column":24},"generated":{"line":11,"column":9}},{"source":"../../src/validators/isType.ts","name":"isType","original":{"line":17,"column":30},"generated":{"line":11,"column":15}},{"source":"../../src/validators/isType.ts","name":"nodeType","original":{"line":17,"column":31},"generated":{"line":11,"column":16}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":17,"column":47},"generated":{"line":11,"column":24}},{"source":"../../src/validators/isType.ts","name":"targetType","original":{"line":17,"column":49},"generated":{"line":11,"column":26}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":17,"column":67},"generated":{"line":11,"column":36}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":17,"column":78},"generated":{"line":11,"column":38}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":18,"column":2},"generated":{"line":12,"column":2}},{"source":"../../src/validators/isType.ts","name":"nodeType","original":{"line":18,"column":6},"generated":{"line":12,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":18,"column":14},"generated":{"line":12,"column":14}},{"source":"../../src/validators/isType.ts","name":"targetType","original":{"line":18,"column":19},"generated":{"line":12,"column":19}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":18,"column":29},"generated":{"line":12,"column":29}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":18,"column":31},"generated":{"line":12,"column":31}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":18,"column":38},"generated":{"line":12,"column":38}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":18,"column":42},"generated":{"line":12,"column":42}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":21,"column":2},"generated":{"line":13,"column":2}},{"source":"../../src/validators/isType.ts","name":"nodeType","original":{"line":21,"column":6},"generated":{"line":13,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":21,"column":14},"generated":{"line":13,"column":14}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":21,"column":18},"generated":{"line":13,"column":18}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":21,"column":22},"generated":{"line":13,"column":22}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":21,"column":24},"generated":{"line":13,"column":24}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":21,"column":31},"generated":{"line":13,"column":31}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":21,"column":36},"generated":{"line":13,"column":36}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":26,"column":2},"generated":{"line":14,"column":2}},{"source":"../../src/validators/isType.ts","name":"ALIAS_KEYS","original":{"line":26,"column":6},"generated":{"line":14,"column":6}},{"source":"../../src/validators/isType.ts","name":"ALIAS_KEYS","original":{"line":26,"column":6},"generated":{"line":14,"column":12}},{"source":"../../src/validators/isType.ts","name":"ALIAS_KEYS","original":{"line":26,"column":6},"generated":{"line":14,"column":13}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":26,"column":16},"generated":{"line":14,"column":23}},{"source":"../../src/validators/isType.ts","name":"targetType","original":{"line":26,"column":17},"generated":{"line":14,"column":24}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":26,"column":27},"generated":{"line":14,"column":34}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":26,"column":28},"generated":{"line":14,"column":35}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":26,"column":30},"generated":{"line":14,"column":37}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":26,"column":37},"generated":{"line":14,"column":44}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":26,"column":42},"generated":{"line":14,"column":49}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":28,"column":2},"generated":{"line":15,"column":2}},{"source":"../../src/validators/isType.ts","name":"aliases","original":{"line":28,"column":8},"generated":{"line":15,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":28,"column":42},"generated":{"line":15,"column":13}},{"source":"../../src/validators/isType.ts","name":"FLIPPED_ALIAS_KEYS","original":{"line":28,"column":45},"generated":{"line":15,"column":16}},{"source":"../../src/validators/isType.ts","name":"FLIPPED_ALIAS_KEYS","original":{"line":28,"column":45},"generated":{"line":15,"column":22}},{"source":"../../src/validators/isType.ts","name":"FLIPPED_ALIAS_KEYS","original":{"line":28,"column":45},"generated":{"line":15,"column":23}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":28,"column":63},"generated":{"line":15,"column":41}},{"source":"../../src/validators/isType.ts","name":"targetType","original":{"line":28,"column":64},"generated":{"line":15,"column":42}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":28,"column":74},"generated":{"line":15,"column":52}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":28,"column":75},"generated":{"line":15,"column":53}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":29,"column":2},"generated":{"line":16,"column":2}},{"source":"../../src/validators/isType.ts","name":"aliases","original":{"line":29,"column":6},"generated":{"line":16,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":29,"column":13},"generated":{"line":16,"column":13}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":29,"column":15},"generated":{"line":16,"column":15}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":4},"generated":{"line":17,"column":4}},{"source":"../../src/validators/isType.ts","name":"aliases","original":{"line":30,"column":8},"generated":{"line":17,"column":8}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":15},"generated":{"line":17,"column":15}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":16},"generated":{"line":17,"column":16}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":17},"generated":{"line":17,"column":17}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":18},"generated":{"line":17,"column":18}},{"source":"../../src/validators/isType.ts","name":"nodeType","original":{"line":30,"column":23},"generated":{"line":17,"column":23}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":31},"generated":{"line":17,"column":31}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":33},"generated":{"line":17,"column":33}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":40},"generated":{"line":17,"column":40}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":44},"generated":{"line":17,"column":44}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":44},"generated":{"line":18,"column":4}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":44},"generated":{"line":18,"column":8}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":44},"generated":{"line":18,"column":17}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":44},"generated":{"line":18,"column":20}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":30,"column":44},"generated":{"line":18,"column":46}},{"source":"../../src/validators/isType.ts","name":"aliases","original":{"line":32,"column":24},"generated":{"line":18,"column":47}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":31},"generated":{"line":18,"column":54}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":31},"generated":{"line":19,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":31},"generated":{"line":19,"column":11}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":31},"generated":{"line":20,"column":4}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":11}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":20}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":21}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":22}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":28}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":33}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":36}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":45}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":46}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":47}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":51}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":4},"generated":{"line":21,"column":55}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":33},"generated":{"line":21,"column":58}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":33},"generated":{"line":22,"column":8}},{"source":"../../src/validators/isType.ts","name":"alias","original":{"line":32,"column":15},"generated":{"line":22,"column":12}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":20},"generated":{"line":22,"column":17}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":20},"generated":{"line":22,"column":20}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":20},"generated":{"line":22,"column":25}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":20},"generated":{"line":22,"column":26}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":32,"column":20},"generated":{"line":22,"column":31}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":33,"column":6},"generated":{"line":23,"column":8}},{"source":"../../src/validators/isType.ts","name":"nodeType","original":{"line":33,"column":10},"generated":{"line":23,"column":12}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":33,"column":18},"generated":{"line":23,"column":20}},{"source":"../../src/validators/isType.ts","name":"alias","original":{"line":33,"column":23},"generated":{"line":23,"column":25}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":33,"column":28},"generated":{"line":23,"column":30}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":33,"column":30},"generated":{"line":23,"column":32}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":33,"column":37},"generated":{"line":23,"column":39}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":33,"column":41},"generated":{"line":23,"column":43}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":24,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":25,"column":4}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":25,"column":13}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":25,"column":16}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":26,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":26,"column":15}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":26,"column":16}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":26,"column":17}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":26,"column":18}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":26,"column":21}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":27,"column":4}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":28,"column":6}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":28,"column":15}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":28,"column":16}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":28,"column":17}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":34,"column":4},"generated":{"line":29,"column":4}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":35,"column":2},"generated":{"line":30,"column":2}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":37,"column":2},"generated":{"line":31,"column":2}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":37,"column":9},"generated":{"line":31,"column":9}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":37,"column":14},"generated":{"line":31,"column":14}},{"source":"../../src/validators/isType.ts","name":null,"original":{"line":38,"column":0},"generated":{"line":32,"column":0}}],"sources":{"../../src/validators/isType.ts":"import { FLIPPED_ALIAS_KEYS, ALIAS_KEYS } from \"../definitions/index.ts\";\nimport type * as t from \"../index.ts\";\n\nexport default function isType<T extends t.Node[\"type\"]>(\n  nodeType: string,\n  targetType: T,\n): nodeType is T;\n\nexport default function isType(\n  nodeType: string | null | undefined,\n  targetType: string,\n): boolean;\n\n/**\n * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.\n */\nexport default function isType(nodeType: string, targetType: string): boolean {\n  if (nodeType === targetType) return true;\n\n  // If nodeType is nullish, it can't be an alias of targetType.\n  if (nodeType == null) return false;\n\n  // This is a fast-path. If the test above failed, but an alias key is found, then the\n  // targetType was a primary node type, so there's no need to check the aliases.\n  // @ts-expect-error targetType may not index ALIAS_KEYS\n  if (ALIAS_KEYS[targetType]) return false;\n\n  const aliases: Array<string> | undefined = FLIPPED_ALIAS_KEYS[targetType];\n  if (aliases) {\n    if (aliases[0] === nodeType) return true;\n\n    for (const alias of aliases) {\n      if (nodeType === alias) return true;\n    }\n  }\n\n  return false;\n}\n"},"lineCount":null}},"error":null,"hash":"292523fb057b602b8d350e70e7a81080","cacheData":{"env":{}}}