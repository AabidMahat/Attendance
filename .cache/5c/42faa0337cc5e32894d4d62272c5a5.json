{"id":"../../node_modules/character-parser/index.js","dependencies":[{"name":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\package.json","includedInParent":true,"mtime":1699342775613},{"name":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\node_modules\\character-parser\\package.json","includedInParent":true,"mtime":1694927329870},{"name":"is-regex","loc":{"line":3,"column":25,"index":40},"parent":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\node_modules\\character-parser\\index.js","resolved":"C:\\Users\\aabid\\OneDrive\\Desktop\\Udemy Courses\\Attendance\\node_modules\\is-regex\\index.js"}],"generated":{"js":"'use strict';\n\nvar objIsRegex = require('is-regex');\n\nexports = (module.exports = parse);\n\nvar TOKEN_TYPES = exports.TOKEN_TYPES = {\n  LINE_COMMENT: '//',\n  BLOCK_COMMENT: '/**/',\n  SINGLE_QUOTE: '\\'',\n  DOUBLE_QUOTE: '\"',\n  TEMPLATE_QUOTE: '`',\n  REGEXP: '//g'\n}\n\nvar BRACKETS = exports.BRACKETS = {\n  '(': ')',\n  '{': '}',\n  '[': ']'\n};\nvar BRACKETS_REVERSED = {\n  ')': '(',\n  '}': '{',\n  ']': '['\n};\n\nexports.parse = parse;\nfunction parse(src, state, options) {\n  options = options || {};\n  state = state || exports.defaultState();\n  var start = options.start || 0;\n  var end = options.end || src.length;\n  var index = start;\n  while (index < end) {\n    try {\n      parseChar(src[index], state);\n    } catch (ex) {\n      ex.index = index;\n      throw ex;\n    }\n    index++;\n  }\n  return state;\n}\n\nexports.parseUntil = parseUntil;\nfunction parseUntil(src, delimiter, options) {\n  options = options || {};\n  var start = options.start || 0;\n  var index = start;\n  var state = exports.defaultState();\n  while (index < src.length) {\n    if ((options.ignoreNesting || !state.isNesting(options)) && matches(src, delimiter, index)) {\n      var end = index;\n      return {\n        start: start,\n        end: end,\n        src: src.substring(start, end)\n      };\n    }\n    try {\n      parseChar(src[index], state);\n    } catch (ex) {\n      ex.index = index;\n      throw ex;\n    }\n    index++;\n  }\n  var err = new Error('The end of the string was reached with no closing bracket found.');\n  err.code = 'CHARACTER_PARSER:END_OF_STRING_REACHED';\n  err.index = index;\n  throw err;\n}\n\nexports.parseChar = parseChar;\nfunction parseChar(character, state) {\n  if (character.length !== 1) {\n    var err = new Error('Character must be a string of length 1');\n    err.name = 'InvalidArgumentError';\n    err.code = 'CHARACTER_PARSER:CHAR_LENGTH_NOT_ONE';\n    throw err;\n  }\n  state = state || exports.defaultState();\n  state.src += character;\n  var wasComment = state.isComment();\n  var lastChar = state.history ? state.history[0] : '';\n\n\n  if (state.regexpStart) {\n    if (character === '/' || character == '*') {\n      state.stack.pop();\n    }\n    state.regexpStart = false;\n  }\n  switch (state.current()) {\n    case TOKEN_TYPES.LINE_COMMENT:\n      if (character === '\\n') {\n        state.stack.pop();\n      }\n      break;\n    case TOKEN_TYPES.BLOCK_COMMENT:\n      if (state.lastChar === '*' && character === '/') {\n        state.stack.pop();\n      }\n      break;\n    case TOKEN_TYPES.SINGLE_QUOTE:\n      if (character === '\\'' && !state.escaped) {\n        state.stack.pop();\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n      } else {\n        state.escaped = false;\n      }\n      break;\n    case TOKEN_TYPES.DOUBLE_QUOTE:\n      if (character === '\"' && !state.escaped) {\n        state.stack.pop();\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n      } else {\n        state.escaped = false;\n      }\n      break;\n    case TOKEN_TYPES.TEMPLATE_QUOTE:\n      if (character === '`' && !state.escaped) {\n        state.stack.pop();\n        state.hasDollar = false;\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n        state.hasDollar = false;\n      } else if (character === '$' && !state.escaped) {\n        state.hasDollar = true;\n      } else if (character === '{' && state.hasDollar) {\n        state.stack.push(BRACKETS[character]);\n      } else {\n        state.escaped = false;\n        state.hasDollar = false;\n      }\n      break;\n    case TOKEN_TYPES.REGEXP:\n      if (character === '/' && !state.escaped) {\n        state.stack.pop();\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n      } else {\n        state.escaped = false;\n      }\n      break;\n    default:\n      if (character in BRACKETS) {\n        state.stack.push(BRACKETS[character]);\n      } else if (character in BRACKETS_REVERSED) {\n        if (state.current() !== character) {\n          var err = new SyntaxError('Mismatched Bracket: ' + character);\n          err.code = 'CHARACTER_PARSER:MISMATCHED_BRACKET';\n          throw err;\n        };\n        state.stack.pop();\n      } else if (lastChar === '/' && character === '/') {\n        // Don't include comments in history\n        state.history = state.history.substr(1);\n        state.stack.push(TOKEN_TYPES.LINE_COMMENT);\n      } else if (lastChar === '/' && character === '*') {\n        // Don't include comment in history\n        state.history = state.history.substr(1);\n        state.stack.push(TOKEN_TYPES.BLOCK_COMMENT);\n      } else if (character === '/' && isRegexp(state.history)) {\n        state.stack.push(TOKEN_TYPES.REGEXP);\n        // N.B. if the next character turns out to be a `*` or a `/`\n        //      then this isn't actually a regexp\n        state.regexpStart = true;\n      } else if (character === '\\'') {\n        state.stack.push(TOKEN_TYPES.SINGLE_QUOTE);\n      } else if (character === '\"') {\n        state.stack.push(TOKEN_TYPES.DOUBLE_QUOTE);\n      } else if (character === '`') {\n        state.stack.push(TOKEN_TYPES.TEMPLATE_QUOTE);\n      }\n      break;\n  }\n  if (!state.isComment() && !wasComment) {\n    state.history = character + state.history;\n  }\n  state.lastChar = character; // store last character for ending block comments\n  return state;\n}\n\nexports.defaultState = function () { return new State() };\nfunction State() {\n  this.stack = [];\n\n  this.regexpStart = false;\n  this.escaped = false;\n  this.hasDollar = false;\n\n  this.src = '';\n  this.history = ''\n  this.lastChar = ''\n}\nState.prototype.current = function () {\n  return this.stack[this.stack.length - 1];\n};\nState.prototype.isString = function () {\n  return (\n    this.current() === TOKEN_TYPES.SINGLE_QUOTE ||\n    this.current() === TOKEN_TYPES.DOUBLE_QUOTE ||\n    this.current() === TOKEN_TYPES.TEMPLATE_QUOTE\n  );\n}\nState.prototype.isComment = function () {\n  return this.current() === TOKEN_TYPES.LINE_COMMENT || this.current() === TOKEN_TYPES.BLOCK_COMMENT;\n}\nState.prototype.isNesting = function (opts) {\n  if (\n    opts && opts.ignoreLineComment &&\n    this.stack.length === 1 && this.stack[0] === TOKEN_TYPES.LINE_COMMENT\n  ) {\n    // if we are only inside a line comment, and line comments are ignored\n    // don't count it as nesting\n    return false;\n  }\n  return !!this.stack.length;\n}\n\nfunction matches(str, matcher, i) {\n  if (objIsRegex(matcher)) {\n    return matcher.test(str.substr(i || 0));\n  } else {\n    return str.substr(i || 0, matcher.length) === matcher;\n  }\n}\n\nexports.isPunctuator = isPunctuator\nfunction isPunctuator(c) {\n  if (!c) return true; // the start of a string is a punctuator\n  var code = c.charCodeAt(0)\n\n  switch (code) {\n    case 46:   // . dot\n    case 40:   // ( open bracket\n    case 41:   // ) close bracket\n    case 59:   // ; semicolon\n    case 44:   // , comma\n    case 123:  // { open curly brace\n    case 125:  // } close curly brace\n    case 91:   // [\n    case 93:   // ]\n    case 58:   // :\n    case 63:   // ?\n    case 126:  // ~\n    case 37:   // %\n    case 38:   // &\n    case 42:   // *:\n    case 43:   // +\n    case 45:   // -\n    case 47:   // /\n    case 60:   // <\n    case 62:   // >\n    case 94:   // ^\n    case 124:  // |\n    case 33:   // !\n    case 61:   // =\n      return true;\n    default:\n      return false;\n  }\n}\n\nexports.isKeyword = isKeyword\nfunction isKeyword(id) {\n  return (id === 'if') || (id === 'in') || (id === 'do') || (id === 'var') || (id === 'for') || (id === 'new') ||\n         (id === 'try') || (id === 'let') || (id === 'this') || (id === 'else') || (id === 'case') ||\n         (id === 'void') || (id === 'with') || (id === 'enum') || (id === 'while') || (id === 'break') || (id === 'catch') ||\n         (id === 'throw') || (id === 'const') || (id === 'yield') || (id === 'class') || (id === 'super') ||\n         (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch') || (id === 'export') ||\n         (id === 'import') || (id === 'default') || (id === 'finally') || (id === 'extends') || (id === 'function') ||\n         (id === 'continue') || (id === 'debugger') || (id === 'package') || (id === 'private') || (id === 'interface') ||\n         (id === 'instanceof') || (id === 'implements') || (id === 'protected') || (id === 'public') || (id === 'static');\n}\n\nfunction isRegexp(history) {\n  //could be start of regexp or divide sign\n\n  history = history.replace(/^\\s*/, '');\n\n  //unless its an `if`, `while`, `for` or `with` it's a divide, so we assume it's a divide\n  if (history[0] === ')') return false;\n  //unless it's a function expression, it's a regexp, so we assume it's a regexp\n  if (history[0] === '}') return true;\n  //any punctuation means it's a regexp\n  if (isPunctuator(history[0])) return true;\n  //if the last thing was a keyword then it must be a regexp (e.g. `typeof /foo/`)\n  if (/^\\w+\\b/.test(history) && isKeyword(/^\\w+\\b/.exec(history)[0].split('').reverse().join(''))) return true;\n\n  return false;\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/character-parser/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"../../node_modules/character-parser/index.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}}],"sources":{"../../node_modules/character-parser/index.js":"'use strict';\n\nvar objIsRegex = require('is-regex');\n\nexports = (module.exports = parse);\n\nvar TOKEN_TYPES = exports.TOKEN_TYPES = {\n  LINE_COMMENT: '//',\n  BLOCK_COMMENT: '/**/',\n  SINGLE_QUOTE: '\\'',\n  DOUBLE_QUOTE: '\"',\n  TEMPLATE_QUOTE: '`',\n  REGEXP: '//g'\n}\n\nvar BRACKETS = exports.BRACKETS = {\n  '(': ')',\n  '{': '}',\n  '[': ']'\n};\nvar BRACKETS_REVERSED = {\n  ')': '(',\n  '}': '{',\n  ']': '['\n};\n\nexports.parse = parse;\nfunction parse(src, state, options) {\n  options = options || {};\n  state = state || exports.defaultState();\n  var start = options.start || 0;\n  var end = options.end || src.length;\n  var index = start;\n  while (index < end) {\n    try {\n      parseChar(src[index], state);\n    } catch (ex) {\n      ex.index = index;\n      throw ex;\n    }\n    index++;\n  }\n  return state;\n}\n\nexports.parseUntil = parseUntil;\nfunction parseUntil(src, delimiter, options) {\n  options = options || {};\n  var start = options.start || 0;\n  var index = start;\n  var state = exports.defaultState();\n  while (index < src.length) {\n    if ((options.ignoreNesting || !state.isNesting(options)) && matches(src, delimiter, index)) {\n      var end = index;\n      return {\n        start: start,\n        end: end,\n        src: src.substring(start, end)\n      };\n    }\n    try {\n      parseChar(src[index], state);\n    } catch (ex) {\n      ex.index = index;\n      throw ex;\n    }\n    index++;\n  }\n  var err = new Error('The end of the string was reached with no closing bracket found.');\n  err.code = 'CHARACTER_PARSER:END_OF_STRING_REACHED';\n  err.index = index;\n  throw err;\n}\n\nexports.parseChar = parseChar;\nfunction parseChar(character, state) {\n  if (character.length !== 1) {\n    var err = new Error('Character must be a string of length 1');\n    err.name = 'InvalidArgumentError';\n    err.code = 'CHARACTER_PARSER:CHAR_LENGTH_NOT_ONE';\n    throw err;\n  }\n  state = state || exports.defaultState();\n  state.src += character;\n  var wasComment = state.isComment();\n  var lastChar = state.history ? state.history[0] : '';\n\n\n  if (state.regexpStart) {\n    if (character === '/' || character == '*') {\n      state.stack.pop();\n    }\n    state.regexpStart = false;\n  }\n  switch (state.current()) {\n    case TOKEN_TYPES.LINE_COMMENT:\n      if (character === '\\n') {\n        state.stack.pop();\n      }\n      break;\n    case TOKEN_TYPES.BLOCK_COMMENT:\n      if (state.lastChar === '*' && character === '/') {\n        state.stack.pop();\n      }\n      break;\n    case TOKEN_TYPES.SINGLE_QUOTE:\n      if (character === '\\'' && !state.escaped) {\n        state.stack.pop();\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n      } else {\n        state.escaped = false;\n      }\n      break;\n    case TOKEN_TYPES.DOUBLE_QUOTE:\n      if (character === '\"' && !state.escaped) {\n        state.stack.pop();\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n      } else {\n        state.escaped = false;\n      }\n      break;\n    case TOKEN_TYPES.TEMPLATE_QUOTE:\n      if (character === '`' && !state.escaped) {\n        state.stack.pop();\n        state.hasDollar = false;\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n        state.hasDollar = false;\n      } else if (character === '$' && !state.escaped) {\n        state.hasDollar = true;\n      } else if (character === '{' && state.hasDollar) {\n        state.stack.push(BRACKETS[character]);\n      } else {\n        state.escaped = false;\n        state.hasDollar = false;\n      }\n      break;\n    case TOKEN_TYPES.REGEXP:\n      if (character === '/' && !state.escaped) {\n        state.stack.pop();\n      } else if (character === '\\\\' && !state.escaped) {\n        state.escaped = true;\n      } else {\n        state.escaped = false;\n      }\n      break;\n    default:\n      if (character in BRACKETS) {\n        state.stack.push(BRACKETS[character]);\n      } else if (character in BRACKETS_REVERSED) {\n        if (state.current() !== character) {\n          var err = new SyntaxError('Mismatched Bracket: ' + character);\n          err.code = 'CHARACTER_PARSER:MISMATCHED_BRACKET';\n          throw err;\n        };\n        state.stack.pop();\n      } else if (lastChar === '/' && character === '/') {\n        // Don't include comments in history\n        state.history = state.history.substr(1);\n        state.stack.push(TOKEN_TYPES.LINE_COMMENT);\n      } else if (lastChar === '/' && character === '*') {\n        // Don't include comment in history\n        state.history = state.history.substr(1);\n        state.stack.push(TOKEN_TYPES.BLOCK_COMMENT);\n      } else if (character === '/' && isRegexp(state.history)) {\n        state.stack.push(TOKEN_TYPES.REGEXP);\n        // N.B. if the next character turns out to be a `*` or a `/`\n        //      then this isn't actually a regexp\n        state.regexpStart = true;\n      } else if (character === '\\'') {\n        state.stack.push(TOKEN_TYPES.SINGLE_QUOTE);\n      } else if (character === '\"') {\n        state.stack.push(TOKEN_TYPES.DOUBLE_QUOTE);\n      } else if (character === '`') {\n        state.stack.push(TOKEN_TYPES.TEMPLATE_QUOTE);\n      }\n      break;\n  }\n  if (!state.isComment() && !wasComment) {\n    state.history = character + state.history;\n  }\n  state.lastChar = character; // store last character for ending block comments\n  return state;\n}\n\nexports.defaultState = function () { return new State() };\nfunction State() {\n  this.stack = [];\n\n  this.regexpStart = false;\n  this.escaped = false;\n  this.hasDollar = false;\n\n  this.src = '';\n  this.history = ''\n  this.lastChar = ''\n}\nState.prototype.current = function () {\n  return this.stack[this.stack.length - 1];\n};\nState.prototype.isString = function () {\n  return (\n    this.current() === TOKEN_TYPES.SINGLE_QUOTE ||\n    this.current() === TOKEN_TYPES.DOUBLE_QUOTE ||\n    this.current() === TOKEN_TYPES.TEMPLATE_QUOTE\n  );\n}\nState.prototype.isComment = function () {\n  return this.current() === TOKEN_TYPES.LINE_COMMENT || this.current() === TOKEN_TYPES.BLOCK_COMMENT;\n}\nState.prototype.isNesting = function (opts) {\n  if (\n    opts && opts.ignoreLineComment &&\n    this.stack.length === 1 && this.stack[0] === TOKEN_TYPES.LINE_COMMENT\n  ) {\n    // if we are only inside a line comment, and line comments are ignored\n    // don't count it as nesting\n    return false;\n  }\n  return !!this.stack.length;\n}\n\nfunction matches(str, matcher, i) {\n  if (objIsRegex(matcher)) {\n    return matcher.test(str.substr(i || 0));\n  } else {\n    return str.substr(i || 0, matcher.length) === matcher;\n  }\n}\n\nexports.isPunctuator = isPunctuator\nfunction isPunctuator(c) {\n  if (!c) return true; // the start of a string is a punctuator\n  var code = c.charCodeAt(0)\n\n  switch (code) {\n    case 46:   // . dot\n    case 40:   // ( open bracket\n    case 41:   // ) close bracket\n    case 59:   // ; semicolon\n    case 44:   // , comma\n    case 123:  // { open curly brace\n    case 125:  // } close curly brace\n    case 91:   // [\n    case 93:   // ]\n    case 58:   // :\n    case 63:   // ?\n    case 126:  // ~\n    case 37:   // %\n    case 38:   // &\n    case 42:   // *:\n    case 43:   // +\n    case 45:   // -\n    case 47:   // /\n    case 60:   // <\n    case 62:   // >\n    case 94:   // ^\n    case 124:  // |\n    case 33:   // !\n    case 61:   // =\n      return true;\n    default:\n      return false;\n  }\n}\n\nexports.isKeyword = isKeyword\nfunction isKeyword(id) {\n  return (id === 'if') || (id === 'in') || (id === 'do') || (id === 'var') || (id === 'for') || (id === 'new') ||\n         (id === 'try') || (id === 'let') || (id === 'this') || (id === 'else') || (id === 'case') ||\n         (id === 'void') || (id === 'with') || (id === 'enum') || (id === 'while') || (id === 'break') || (id === 'catch') ||\n         (id === 'throw') || (id === 'const') || (id === 'yield') || (id === 'class') || (id === 'super') ||\n         (id === 'return') || (id === 'typeof') || (id === 'delete') || (id === 'switch') || (id === 'export') ||\n         (id === 'import') || (id === 'default') || (id === 'finally') || (id === 'extends') || (id === 'function') ||\n         (id === 'continue') || (id === 'debugger') || (id === 'package') || (id === 'private') || (id === 'interface') ||\n         (id === 'instanceof') || (id === 'implements') || (id === 'protected') || (id === 'public') || (id === 'static');\n}\n\nfunction isRegexp(history) {\n  //could be start of regexp or divide sign\n\n  history = history.replace(/^\\s*/, '');\n\n  //unless its an `if`, `while`, `for` or `with` it's a divide, so we assume it's a divide\n  if (history[0] === ')') return false;\n  //unless it's a function expression, it's a regexp, so we assume it's a regexp\n  if (history[0] === '}') return true;\n  //any punctuation means it's a regexp\n  if (isPunctuator(history[0])) return true;\n  //if the last thing was a keyword then it must be a regexp (e.g. `typeof /foo/`)\n  if (/^\\w+\\b/.test(history) && isKeyword(/^\\w+\\b/.exec(history)[0].split('').reverse().join(''))) return true;\n\n  return false;\n}\n"},"lineCount":297}},"error":null,"hash":"512bc2ef9f663cbe26a709db9f4884ce","cacheData":{"env":{}}}